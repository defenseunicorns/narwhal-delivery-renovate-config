{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",

  "description": "renovate configuration for eks marketplace addons",

  "customDatasources": {
    "eks-addons": {
      "defaultRegistryUrlTemplate": "https://raw.githubusercontent.com/defenseunicorns/narwhal-delivery-renovate-config/refs/heads/main/dependencies/eks-addons-versions.json",
      "format": "json",
      "transformTemplates": [
        // Use {{{packageName}}} to filter by the captured depName
        // see https://try.jsonata.org/htAy0eXsP
        "{ \"releases\": $.addons[addonName = \"{{{packageName}}}\"].addonVersions[].{\"version\": addonVersion} }"
      ]
    }
  },

  "customManagers": [
    {
      "fileMatch": [
        "(^|/).*\\.tfvars$",
        "(^|/).*\\.tf$"
      ],
      // see https://regex101.com/r/Kjv2mb/2
      // This regex relies on at least 2-space indentation to capture EKS add-on blocks
      // (like "vpc-cni" or "kube-proxy") and skip top-level blocks such as "cluster_addons".
      // We use a tempered dot pattern so the match doesn't continue into the next sibling block
      // at the same indentation. However, this is NOT a full HCL parser: HCL is hierarchical by
      // design, and a single regex cannot reliably distinguish parent vs. child blocks in all
      // edge cases. In this codebase, consistent indentation and placement of add-on blocks makes
      // this approach work well enough for Renovate's version extraction.
      "matchStrings": [
        "(?ms)^ {2,}(?<depname>[\\w-]+)\\s*=\\s*\\{(?:(?!^ {2,}[\\w-]+\\s*=\\s*\\{).)*?addon_version\\s*=\\s*\"(?<currentValue>[^\"]+)\""
      ],
      "datasourceTemplate": "custom.eks-addons",
      "depNameTemplate": "{{{depName}}}",
      "versioningTemplate": "loose"
    }
  ]
}
